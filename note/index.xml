<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on JIMBRAY</title>
    <link>http://jimbray.xyz/note/</link>
    <description>Recent content in Notes on JIMBRAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 20 Jan 2018 10:44:47 +0800</lastBuildDate>
    
	<atom:link href="http://jimbray.xyz/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>进程与线程的区别</title>
      <link>http://jimbray.xyz/note/content/process_and_thread/</link>
      <pubDate>Sat, 20 Jan 2018 10:44:47 +0800</pubDate>
      
      <guid>http://jimbray.xyz/note/content/process_and_thread/</guid>
      <description>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。
1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.
2) 线程的划分尺度小于进程，使得多线程程序的并发性高。
3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。
4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。
5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</description>
    </item>
    
    <item>
      <title>记录</title>
      <link>http://jimbray.xyz/note/note/</link>
      <pubDate>Sat, 20 Jan 2018 10:39:42 +0800</pubDate>
      
      <guid>http://jimbray.xyz/note/note/</guid>
      <description>进程与线程的区别</description>
    </item>
    
  </channel>
</rss>